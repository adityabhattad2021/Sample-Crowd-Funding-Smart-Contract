{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "effectiveWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundInWEI",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_amtSentFromAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7e7d39072e938c7de459ecec450391098dc3ee1d6fa2faecc91c33882e2a724a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "905518",
    "logsBloom": "0x
    "blockHash": "0x0c3f9d944fdc996adc4b2b196a3c8917a2b9913b92304a1c2dc9834cb07678a0",
    "transactionHash": "0x7e7d39072e938c7de459ecec450391098dc3ee1d6fa2faecc91c33882e2a724a",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "905518",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "c924e9c857cc3e4e0f0335e397804811",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectiveWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundInWEI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_amtSentFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Aditya Bhattad\",\"details\":\"This contract will allow users to fund a project.The contract will also allow the owner to withdraw funds.The contract will also allow the owner to set a minimum funding value.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A Contract to Fund a Project\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"/*\\n    This Contract will:\\n        Get funds from the users\\n        Withdraw Funds\\n        Set a Minimum Funding Value in USD\\n*/\\n\\n/* \\n    Blockchain Oracle: Any device that interacts with the off-chain world to provide external data \\n    or computation to the smart contracts.\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A Contract to Fund a Project\\n *  @dev This contract will allow users to fund a project.\\n *  @dev The contract will also allow the owner to withdraw funds.\\n *  @dev The contract will also allow the owner to set a minimum funding value.\\n *  @notice This is to demo a sample funding contract\\n *  @author Aditya Bhattad\\n */\\ncontract FundMe {\\n    // Gas optimisations keyword:constant and immutable.(Learn more later).\\n\\n    // s_variable is a state variable and is gas expensive.\\n    // c_variable is a constant and is not gas expensive.\\n    // i_variable is an immutable variable and is not gas expensive.\\n    // r_variable is a return variable and is not gas expensive.\\n\\n    address public immutable i_Owner;\\n\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    address[] public s_funders;\\n    mapping(address => uint256) public s_amtSentFromAddress;\\n\\n    // Modifier in Solidity..\\n    modifier onlyOwner() {\\n        \\n\\n        // to save gas we are using alternative of this.\\n        // require(msg.sender==i_owner,\\\"Only owner can use withdraw function\\\");\\n\\n        // This means wherever this tag(i.e. onlyOwner) is added the\\n        // code in that function will be run in the order below .\\n\\n        // first this line.\\ud83d\\udc47\\n\\n        if (msg.sender != i_Owner) {\\n            revert FundMe__NotOwner();\\n        }\\n\\n        //  and then rest of the code present in that function.\\n        // _;: represents rest of the code present in the function\\n        // in which modifier tag is added.\\n        _;\\n    }\\n\\n    // Basic Constructor in Solidity.\\n    constructor(address priceFeedAddress) {\\n        i_Owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // what happens if some one sends this contract ETH without calling fund function.\\n    receive() external payable {\\n        fundInWEI();\\n    }\\n\\n    fallback() external payable {\\n        fundInWEI();\\n    }\\n\\n    // Payble keyword allows this contract to hold gas.\\n    function fundInWEI() public payable {\\n        // Want to be able to set a minimum fund amount in USD\\n        // 1. How do we send ETH to this contract?\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Not Enough Funds Sent!\\\"\\n        ); // as the money math is done inn wei therefore 1e18=1*10**18.\\n        // if the above condition isn't met the function will revert any previously done by it and return.\\n        s_funders.push(msg.sender);\\n        s_amtSentFromAddress[msg.sender] += msg.value;\\n    }\\n\\n    // Adding modifier onlyOwner created below.\\n\\n    // This function works well but it is not gas efficient.\\n\\n    // function withdraw() public onlyOwner {\\n    //     for (\\n    //         uint256 funderIndex = 0;\\n    //         funderIndex < s_funders.length;\\n    //         funderIndex++\\n    //     ) {\\n    //         address _funder = s_funders[funderIndex];\\n    //         s_amtSentFromAddress[_funder] = 0;\\n    //     }\\n    //     // Resetting the array.\\n    //     s_funders = new address[](0);\\n    //     (bool callSuccess, ) = payable(msg.sender).call{\\n    //         value: address(this).balance\\n    //     }(\\\"\\\");\\n    //     require(callSuccess, \\\"Call Failed\\\");\\n    // }\\n\\n    // This function is gas efficient.\\n\\n    function effectiveWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address _funder = funders[funderIndex];\\n            s_amtSentFromAddress[_funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = i_Owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Withdraw Call Failed!\\\");\\n    }\\n\\n\\n\\n\\n}\\n\\n// function getConversionRates(uint256 ethAmt) public view returns (uint256) {\\n//     return PriceConverter.getConversionRate(ethAmt);\\n// }\\n\",\"keccak256\":\"0x453fdf3f073ef6e044bd84129fbdb1af6bf3a5f7b5298c25e9cd637db927b3a5\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// StateVariables: These are the variables whose values are permenantly stored \\n// in the contract storage even after the functions they are declared \\n// in are executed.\\n// Local Variables: Variables whose values are present till function is executing.\\n// A Library Cannot have State Variables and all the functions in Library are Internal.\\n// A Library cannot inherit any element.\\n// A Library cannot be inherited.\\n\\nlibrary PriceConverter{\\n\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) \\n    {\\n        /*\\n        To Interact with contract outside of our project we will need its\\n`       ABI:Application Binary Interface\\n        Address:0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        (Took From : https://docs.chain.link/docs/ethereum-addresses/) (Rinkesby Testnet)\\n        */\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n\\n        // This is price of ETH in terms of USD.\\n        return uint256(price * 1e10);\\n\\n    }\\n\\n    function getVersion() internal view returns(uint256)\\n    {\\n        AggregatorV3Interface priceFeed=AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256){\\n        uint256 ethPrice=getPrice(priceFeed);\\n        uint256 ethAmtInUSD=(ethPrice*ethAmount)/1e18;\\n        return ethAmtInUSD;\\n    }\\n\\n}\",\"keccak256\":\"0x89f1e26caf6f5f3b87437955ea6e809baedfd0c72cb31163c553e1ea2821307c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051620010693803806200106983398181016040528101906100349190610111565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100de826100b3565b9050919050565b6100ee816100d3565b81146100f957600080fd5b50565b60008151905061010b816100e5565b92915050565b600060208284031215610127576101266100ae565b5b6000610135848285016100fc565b91505092915050565b608051610f0162000168600039600081816103200152818161051701526106310152610f016000f3fe6080604052600436106100745760003560e01c806349db09271161004e57806349db0927146100ff57806354861af7146101165780636b69a59214610153578063e667b0bf1461017e57610083565b80630100005f1461008d5780630ec3b027146100ca5780633d6c169f146100f557610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610839565b6102e2565b6040516100c1919061087f565b60405180910390f35b3480156100d657600080fd5b506100df6102fa565b6040516100ec91906108f9565b60405180910390f35b6100fd6101a9565b005b34801561010b57600080fd5b5061011461031e565b005b34801561012257600080fd5b5061013d60048036038101906101389190610940565b6105e3565b60405161014a919061097c565b60405180910390f35b34801561015f57600080fd5b50610168610622565b604051610175919061087f565b60405180910390f35b34801561018a57600080fd5b5061019361062f565b6040516101a0919061097c565b60405180910390f35b6802b5e3af16b18800006101e660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065390919063ffffffff16565b1015610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e906109f4565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d99190610a43565b92505081905550565b60026020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561042757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103dd575b5050505050905060005b81518110156104b257600082828151811061044f5761044e610a99565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104aa90610ac8565b915050610431565b50600067ffffffffffffffff8111156104ce576104cd610b11565b5b6040519080825280602002602001820160405280156104fc5781602001602082028036833780820191505090505b506001908051906020019061051292919061072f565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161055990610b71565b60006040518083038185875af1925050503d8060008114610596576040519150601f19603f3d011682016040523d82523d6000602084013e61059b565b606091505b50509050806105df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d690610bd2565b60405180910390fd5b5050565b600181815481106105f357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061065f8361068f565b90506000670de0b6b3a764000085836106789190610bf2565b6106829190610c7b565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106d857600080fd5b505afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107109190610d39565b5050509150506402540be400816107279190610db4565b915050919050565b8280548282559060005260206000209081019282156107a8579160200282015b828111156107a75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061074f565b5b5090506107b591906107b9565b5090565b5b808211156107d25760008160009055506001016107ba565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610806826107db565b9050919050565b610816816107fb565b811461082157600080fd5b50565b6000813590506108338161080d565b92915050565b60006020828403121561084f5761084e6107d6565b5b600061085d84828501610824565b91505092915050565b6000819050919050565b61087981610866565b82525050565b60006020820190506108946000830184610870565b92915050565b6000819050919050565b60006108bf6108ba6108b5846107db565b61089a565b6107db565b9050919050565b60006108d1826108a4565b9050919050565b60006108e3826108c6565b9050919050565b6108f3816108d8565b82525050565b600060208201905061090e60008301846108ea565b92915050565b61091d81610866565b811461092857600080fd5b50565b60008135905061093a81610914565b92915050565b600060208284031215610956576109556107d6565b5b60006109648482850161092b565b91505092915050565b610976816107fb565b82525050565b6000602082019050610991600083018461096d565b92915050565b600082825260208201905092915050565b7f4e6f7420456e6f7567682046756e64732053656e742100000000000000000000600082015250565b60006109de601683610997565b91506109e9826109a8565b602082019050919050565b60006020820190508181036000830152610a0d816109d1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a4e82610866565b9150610a5983610866565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a8e57610a8d610a14565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ad382610866565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b0657610b05610a14565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b5b600083610b40565b9150610b6682610b4b565b600082019050919050565b6000610b7c82610b4e565b9150819050919050565b7f57697468647261772043616c6c204661696c6564210000000000000000000000600082015250565b6000610bbc601583610997565b9150610bc782610b86565b602082019050919050565b60006020820190508181036000830152610beb81610baf565b9050919050565b6000610bfd82610866565b9150610c0883610866565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c4157610c40610a14565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c8682610866565b9150610c9183610866565b925082610ca157610ca0610c4c565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ccb81610cac565b8114610cd657600080fd5b50565b600081519050610ce881610cc2565b92915050565b6000819050919050565b610d0181610cee565b8114610d0c57600080fd5b50565b600081519050610d1e81610cf8565b92915050565b600081519050610d3381610914565b92915050565b600080600080600060a08688031215610d5557610d546107d6565b5b6000610d6388828901610cd9565b9550506020610d7488828901610d0f565b9450506040610d8588828901610d24565b9350506060610d9688828901610d24565b9250506080610da788828901610cd9565b9150509295509295909350565b6000610dbf82610cee565b9150610dca83610cee565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e0957610e08610a14565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e4657610e45610a14565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e8357610e82610a14565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610ec057610ebf610a14565b5b82820290509291505056fea2646970667358221220b1c3391b3d9a916884a00fb78208e5eab78862bcc156d146c9788e7b126e77c864736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c806349db09271161004e57806349db0927146100ff57806354861af7146101165780636b69a59214610153578063e667b0bf1461017e57610083565b80630100005f1461008d5780630ec3b027146100ca5780633d6c169f146100f557610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610839565b6102e2565b6040516100c1919061087f565b60405180910390f35b3480156100d657600080fd5b506100df6102fa565b6040516100ec91906108f9565b60405180910390f35b6100fd6101a9565b005b34801561010b57600080fd5b5061011461031e565b005b34801561012257600080fd5b5061013d60048036038101906101389190610940565b6105e3565b60405161014a919061097c565b60405180910390f35b34801561015f57600080fd5b50610168610622565b604051610175919061087f565b60405180910390f35b34801561018a57600080fd5b5061019361062f565b6040516101a0919061097c565b60405180910390f35b6802b5e3af16b18800006101e660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065390919063ffffffff16565b1015610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e906109f4565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d99190610a43565b92505081905550565b60026020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561042757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103dd575b5050505050905060005b81518110156104b257600082828151811061044f5761044e610a99565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104aa90610ac8565b915050610431565b50600067ffffffffffffffff8111156104ce576104cd610b11565b5b6040519080825280602002602001820160405280156104fc5781602001602082028036833780820191505090505b506001908051906020019061051292919061072f565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161055990610b71565b60006040518083038185875af1925050503d8060008114610596576040519150601f19603f3d011682016040523d82523d6000602084013e61059b565b606091505b50509050806105df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d690610bd2565b60405180910390fd5b5050565b600181815481106105f357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061065f8361068f565b90506000670de0b6b3a764000085836106789190610bf2565b6106829190610c7b565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106d857600080fd5b505afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107109190610d39565b5050509150506402540be400816107279190610db4565b915050919050565b8280548282559060005260206000209081019282156107a8579160200282015b828111156107a75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061074f565b5b5090506107b591906107b9565b5090565b5b808211156107d25760008160009055506001016107ba565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610806826107db565b9050919050565b610816816107fb565b811461082157600080fd5b50565b6000813590506108338161080d565b92915050565b60006020828403121561084f5761084e6107d6565b5b600061085d84828501610824565b91505092915050565b6000819050919050565b61087981610866565b82525050565b60006020820190506108946000830184610870565b92915050565b6000819050919050565b60006108bf6108ba6108b5846107db565b61089a565b6107db565b9050919050565b60006108d1826108a4565b9050919050565b60006108e3826108c6565b9050919050565b6108f3816108d8565b82525050565b600060208201905061090e60008301846108ea565b92915050565b61091d81610866565b811461092857600080fd5b50565b60008135905061093a81610914565b92915050565b600060208284031215610956576109556107d6565b5b60006109648482850161092b565b91505092915050565b610976816107fb565b82525050565b6000602082019050610991600083018461096d565b92915050565b600082825260208201905092915050565b7f4e6f7420456e6f7567682046756e64732053656e742100000000000000000000600082015250565b60006109de601683610997565b91506109e9826109a8565b602082019050919050565b60006020820190508181036000830152610a0d816109d1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a4e82610866565b9150610a5983610866565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a8e57610a8d610a14565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ad382610866565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b0657610b05610a14565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b5b600083610b40565b9150610b6682610b4b565b600082019050919050565b6000610b7c82610b4e565b9150819050919050565b7f57697468647261772043616c6c204661696c6564210000000000000000000000600082015250565b6000610bbc601583610997565b9150610bc782610b86565b602082019050919050565b60006020820190508181036000830152610beb81610baf565b9050919050565b6000610bfd82610866565b9150610c0883610866565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c4157610c40610a14565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c8682610866565b9150610c9183610866565b925082610ca157610ca0610c4c565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ccb81610cac565b8114610cd657600080fd5b50565b600081519050610ce881610cc2565b92915050565b6000819050919050565b610d0181610cee565b8114610d0c57600080fd5b50565b600081519050610d1e81610cf8565b92915050565b600081519050610d3381610914565b92915050565b600080600080600060a08688031215610d5557610d546107d6565b5b6000610d6388828901610cd9565b9550506020610d7488828901610d0f565b9450506040610d8588828901610d24565b9350506060610d9688828901610d24565b9250506080610da788828901610cd9565b9150509295509295909350565b6000610dbf82610cee565b9150610dca83610cee565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e0957610e08610a14565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e4657610e45610a14565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e8357610e82610a14565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610ec057610ebf610a14565b5b82820290509291505056fea2646970667358221220b1c3391b3d9a916884a00fb78208e5eab78862bcc156d146c9788e7b126e77c864736f6c63430008090033",
  "devdoc": {
    "author": "Aditya Bhattad",
    "details": "This contract will allow users to fund a project.The contract will also allow the owner to withdraw funds.The contract will also allow the owner to set a minimum funding value.",
    "kind": "dev",
    "methods": {},
    "title": "A Contract to Fund a Project",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_amtSentFromAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}