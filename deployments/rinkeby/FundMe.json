{
  "address": "0x7c3Bc62Fbc33fCe5E697A4e6F33B92C6b23B195C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amtSentFromAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundinWEI",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_Owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdec9a6309c5490a6cf6336050d7dcb0b86e142a5dba1ea53e4dc55daab82b450",
  "receipt": {
    "to": null,
    "from": "0x178742ED3684E0F8f7B024CB4f4bF214efDf4361",
    "contractAddress": "0x7c3Bc62Fbc33fCe5E697A4e6F33B92C6b23B195C",
    "transactionIndex": 82,
    "gasUsed": "854591",
    "logsBloom": "0x
    "blockHash": "0xd8ca82d9a514a24dd505d9538a3228e65d5d066dcb8c906f0b029e8bbe34385b",
    "transactionHash": "0xdec9a6309c5490a6cf6336050d7dcb0b86e142a5dba1ea53e4dc55daab82b450",
    "logs": [],
    "blockNumber": 11056606,
    "cumulativeGasUsed": "25407263",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "b27e4a85de9a7fcdaa9aae63f4b4db82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amtSentFromAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundinWEI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"/*\\n    This Contract will:\\n        Get funds from the users\\n        Withdraw Funds\\n        Set a Minimum Funding Value in USD\\n*/\\n\\n/* \\n    Blockchain Oracle: Any device that interacts with the off-chain world to provide external data \\n    or computation to the smart contracts.\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    // Gas optimisations keyword:constant and immutable.(Learn more later).\\n\\n    address public immutable i_Owner;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    // Basic Constructor in Solidity.\\n    constructor(address priceFeedAddress) {\\n        i_Owner = msg.sender;\\n        priceFeed=AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    // Payble keyword allows this contract to hold gas.\\n\\n    address[] public funders;\\n    mapping(address => uint256) public amtSentFromAddress;\\n\\n    function fundinWEI() public payable {\\n        // Want to be able to set a minimum fund amount in USD\\n        // 1. How do we send ETH to this contract?\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Not Enough Funds\\\"\\n        ); // as the money math is done inn wei therefore 1e18=1*10**18.\\n        // if the above condition isn't met the function will revert any previously done by it and return.\\n        funders.push(msg.sender);\\n        amtSentFromAddress[msg.sender] = msg.value;\\n    }\\n\\n    // Adding modifier onlyOwner created below.\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address _funder = funders[funderIndex];\\n            amtSentFromAddress[_funder] = 0;\\n        }\\n        // Resetting the array.\\n        funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    // function getConversionRates(uint256 ethAmt) public view returns (uint256) {\\n    //     return PriceConverter.getConversionRate(ethAmt);\\n    // }\\n\\n    // Modifier in Solidity..\\n    modifier onlyOwner() {\\n        // This means wherever this tag(i.e. onlyOwner) is added the\\n        // code in that function will be run in the order below .\\n\\n        // first this line.\\ud83d\\udc47\\n\\n        // to save gas we are using alternative of this.\\n        // require(msg.sender==i_owner,\\\"Only owner can use withdraw function\\\");\\n\\n        if (msg.sender != i_Owner) {\\n            revert NotOwner();\\n        }\\n\\n        //  and then rest of the code present in that function.\\n        // _;: represents rest of the code present in the function\\n        // in which modifier tag is added.\\n        _;\\n    }\\n\\n    // what happens if some one sends this contract ETH without calling fund function.\\n    receive() external payable {\\n        fundinWEI();\\n    }\\n\\n    fallback() external payable {\\n        fundinWEI();\\n    }\\n}\\n\",\"keccak256\":\"0xdc4c8a526dc39ba58d0cb5286e6bee511cae9d1dce27aeb490eeda6cd97ea917\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// StateVariables: These are the variables whose values are permenantly stored \\n// in the contract storage even after the functions they are declared \\n// in are executed.\\n// Local Variables: Variables whose values are present till function is executing.\\n// A Library Cannot have State Variables and all the functions in Library are Internal.\\n// A Library cannot inherit any element.\\n// A Library cannot be inherited.\\n\\nlibrary PriceConverter{\\n\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) \\n    {\\n        /*\\n        To Interact with contract outside of our project we will need its\\n`       ABI:Application Binary Interface\\n        Address:0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        (Took From : https://docs.chain.link/docs/ethereum-addresses/) (Rinkesby Testnet)\\n        */\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n\\n        // This is price of ETH in terms of USD.\\n        return uint256(price * 1e10);\\n\\n    }\\n\\n    function getVersion() internal view returns(uint256)\\n    {\\n        AggregatorV3Interface priceFeed=AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256){\\n        uint256 ethPrice=getPrice(priceFeed);\\n        uint256 ethAmtInUSD=(ethPrice*ethAmount)/1e18;\\n        return ethAmtInUSD;\\n    }\\n\\n}\",\"keccak256\":\"0x89f1e26caf6f5f3b87437955ea6e809baedfd0c72cb31163c553e1ea2821307c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f73380380610f738339818101604052810190610032919061010f565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dc826100b1565b9050919050565b6100ec816100d1565b81146100f757600080fd5b50565b600081519050610109816100e3565b92915050565b600060208284031215610125576101246100ac565b5b6000610133848285016100fa565b91505092915050565b608051610e1561015e600039600081816102ea015261059b0152610e156000f3fe6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a592146100eb578063741bef1a14610116578063dc0d3dff14610141578063e667b0bf1461017e57610083565b80632272f9601461008d5780632c67b6f5146100975780633ccfd60b146100d457610083565b36610083576100816101a9565b005b61008b6101a9565b005b6100956101a9565b005b3480156100a357600080fd5b506100be60048036038101906100b991906107a3565b6102d0565b6040516100cb91906107e9565b60405180910390f35b3480156100e057600080fd5b506100e96102e8565b005b3480156100f757600080fd5b50610100610529565b60405161010d91906107e9565b60405180910390f35b34801561012257600080fd5b5061012b610536565b6040516101389190610863565b60405180910390f35b34801561014d57600080fd5b50610168600480360381019061016391906108aa565b61055a565b60405161017591906108e6565b60405180910390f35b34801561018a57600080fd5b50610193610599565b6040516101a091906108e6565b60405180910390f35b6802b5e3af16b18800006101e660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105bd90919063ffffffff16565b1015610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e9061095e565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60026020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036d576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610419576000600182815481106103935761039261097e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610411906109dc565b915050610370565b50600067ffffffffffffffff81111561043557610434610a25565b5b6040519080825280602002602001820160405280156104635781602001602082028036833780820191505090505b5060019080519060200190610479929190610699565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a090610a85565b60006040518083038185875af1925050503d80600081146104dd576040519150601f19603f3d011682016040523d82523d6000602084013e6104e2565b606091505b5050905080610526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051d90610ae6565b60405180910390fd5b50565b6802b5e3af16b188000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061056a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806105c9836105f9565b90506000670de0b6b3a764000085836105e29190610b06565b6105ec9190610b8f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064257600080fd5b505afa158015610656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067a9190610c4d565b5050509150506402540be400816106919190610cc8565b915050919050565b828054828255906000526020600020908101928215610712579160200282015b828111156107115782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b9565b5b50905061071f9190610723565b5090565b5b8082111561073c576000816000905550600101610724565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077082610745565b9050919050565b61078081610765565b811461078b57600080fd5b50565b60008135905061079d81610777565b92915050565b6000602082840312156107b9576107b8610740565b5b60006107c78482850161078e565b91505092915050565b6000819050919050565b6107e3816107d0565b82525050565b60006020820190506107fe60008301846107da565b92915050565b6000819050919050565b600061082961082461081f84610745565b610804565b610745565b9050919050565b600061083b8261080e565b9050919050565b600061084d82610830565b9050919050565b61085d81610842565b82525050565b60006020820190506108786000830184610854565b92915050565b610887816107d0565b811461089257600080fd5b50565b6000813590506108a48161087e565b92915050565b6000602082840312156108c0576108bf610740565b5b60006108ce84828501610895565b91505092915050565b6108e081610765565b82525050565b60006020820190506108fb60008301846108d7565b92915050565b600082825260208201905092915050565b7f4e6f7420456e6f7567682046756e647300000000000000000000000000000000600082015250565b6000610948601083610901565b915061095382610912565b602082019050919050565b600060208201905081810360008301526109778161093b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109e7826107d0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1a57610a196109ad565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a6f600083610a54565b9150610a7a82610a5f565b600082019050919050565b6000610a9082610a62565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ad0600b83610901565b9150610adb82610a9a565b602082019050919050565b60006020820190508181036000830152610aff81610ac3565b9050919050565b6000610b11826107d0565b9150610b1c836107d0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5557610b546109ad565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b9a826107d0565b9150610ba5836107d0565b925082610bb557610bb4610b60565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bdf81610bc0565b8114610bea57600080fd5b50565b600081519050610bfc81610bd6565b92915050565b6000819050919050565b610c1581610c02565b8114610c2057600080fd5b50565b600081519050610c3281610c0c565b92915050565b600081519050610c478161087e565b92915050565b600080600080600060a08688031215610c6957610c68610740565b5b6000610c7788828901610bed565b9550506020610c8888828901610c23565b9450506040610c9988828901610c38565b9350506060610caa88828901610c38565b9250506080610cbb88828901610bed565b9150509295509295909350565b6000610cd382610c02565b9150610cde83610c02565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d1d57610d1c6109ad565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5a57610d596109ad565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d9757610d966109ad565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dd457610dd36109ad565b5b82820290509291505056fea26469706673582212205ed61e2ee46f4aaa6a74914cbc4bd2e7a2761ea88961477c6778b1614589d59364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a592146100eb578063741bef1a14610116578063dc0d3dff14610141578063e667b0bf1461017e57610083565b80632272f9601461008d5780632c67b6f5146100975780633ccfd60b146100d457610083565b36610083576100816101a9565b005b61008b6101a9565b005b6100956101a9565b005b3480156100a357600080fd5b506100be60048036038101906100b991906107a3565b6102d0565b6040516100cb91906107e9565b60405180910390f35b3480156100e057600080fd5b506100e96102e8565b005b3480156100f757600080fd5b50610100610529565b60405161010d91906107e9565b60405180910390f35b34801561012257600080fd5b5061012b610536565b6040516101389190610863565b60405180910390f35b34801561014d57600080fd5b50610168600480360381019061016391906108aa565b61055a565b60405161017591906108e6565b60405180910390f35b34801561018a57600080fd5b50610193610599565b6040516101a091906108e6565b60405180910390f35b6802b5e3af16b18800006101e660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105bd90919063ffffffff16565b1015610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e9061095e565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60026020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036d576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610419576000600182815481106103935761039261097e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610411906109dc565b915050610370565b50600067ffffffffffffffff81111561043557610434610a25565b5b6040519080825280602002602001820160405280156104635781602001602082028036833780820191505090505b5060019080519060200190610479929190610699565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a090610a85565b60006040518083038185875af1925050503d80600081146104dd576040519150601f19603f3d011682016040523d82523d6000602084013e6104e2565b606091505b5050905080610526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051d90610ae6565b60405180910390fd5b50565b6802b5e3af16b188000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061056a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806105c9836105f9565b90506000670de0b6b3a764000085836105e29190610b06565b6105ec9190610b8f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064257600080fd5b505afa158015610656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067a9190610c4d565b5050509150506402540be400816106919190610cc8565b915050919050565b828054828255906000526020600020908101928215610712579160200282015b828111156107115782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b9565b5b50905061071f9190610723565b5090565b5b8082111561073c576000816000905550600101610724565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077082610745565b9050919050565b61078081610765565b811461078b57600080fd5b50565b60008135905061079d81610777565b92915050565b6000602082840312156107b9576107b8610740565b5b60006107c78482850161078e565b91505092915050565b6000819050919050565b6107e3816107d0565b82525050565b60006020820190506107fe60008301846107da565b92915050565b6000819050919050565b600061082961082461081f84610745565b610804565b610745565b9050919050565b600061083b8261080e565b9050919050565b600061084d82610830565b9050919050565b61085d81610842565b82525050565b60006020820190506108786000830184610854565b92915050565b610887816107d0565b811461089257600080fd5b50565b6000813590506108a48161087e565b92915050565b6000602082840312156108c0576108bf610740565b5b60006108ce84828501610895565b91505092915050565b6108e081610765565b82525050565b60006020820190506108fb60008301846108d7565b92915050565b600082825260208201905092915050565b7f4e6f7420456e6f7567682046756e647300000000000000000000000000000000600082015250565b6000610948601083610901565b915061095382610912565b602082019050919050565b600060208201905081810360008301526109778161093b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109e7826107d0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1a57610a196109ad565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a6f600083610a54565b9150610a7a82610a5f565b600082019050919050565b6000610a9082610a62565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ad0600b83610901565b9150610adb82610a9a565b602082019050919050565b60006020820190508181036000830152610aff81610ac3565b9050919050565b6000610b11826107d0565b9150610b1c836107d0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5557610b546109ad565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b9a826107d0565b9150610ba5836107d0565b925082610bb557610bb4610b60565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bdf81610bc0565b8114610bea57600080fd5b50565b600081519050610bfc81610bd6565b92915050565b6000819050919050565b610c1581610c02565b8114610c2057600080fd5b50565b600081519050610c3281610c0c565b92915050565b600081519050610c478161087e565b92915050565b600080600080600060a08688031215610c6957610c68610740565b5b6000610c7788828901610bed565b9550506020610c8888828901610c23565b9450506040610c9988828901610c38565b9350506060610caa88828901610c38565b9250506080610cbb88828901610bed565b9150509295509295909350565b6000610cd382610c02565b9150610cde83610c02565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d1d57610d1c6109ad565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5a57610d596109ad565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d9757610d966109ad565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dd457610dd36109ad565b5b82820290509291505056fea26469706673582212205ed61e2ee46f4aaa6a74914cbc4bd2e7a2761ea88961477c6778b1614589d59364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 55,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 83,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 87,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "amtSentFromAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}